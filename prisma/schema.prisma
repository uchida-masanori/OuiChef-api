generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model images {
  id         BigInt   @id @default(autoincrement())
  post_id    BigInt
  image_path String[]
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  posts      posts    @relation(fields: [post_id], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model likes {
  id         BigInt   @id @default(autoincrement())
  uuid       String   @db.Uuid
  post_id    BigInt
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  posts      posts    @relation(fields: [post_id], references: [id], onDelete: Cascade)
  users      users    @relation(fields: [uuid], references: [uuid], onDelete: Cascade)

  @@unique([uuid, post_id], map: "unique_user_post_pair")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model posts {
  id         BigInt   @id @default(autoincrement())
  content    String
  uuid       String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  images     images[]
  likes      likes[]
  users      users    @relation(fields: [uuid], references: [uuid], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model users {
  id         BigInt   @id(map: "User_pkey") @default(autoincrement())
  uuid       String   @unique(map: "unique_uuid") @default(dbgenerated("auth.uid()")) @db.Uuid
  user_id    String   @unique(map: "User_user_id_key") @db.VarChar
  user_name  String   @db.VarChar
  image_path String?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  likes      likes[]
  posts      posts[]
}
